{"version":3,"sources":["Pages/Current.js","Pages/Tomorrow.js","Pages/Hourly.js","App.js","index.js"],"names":["Current","props","this","currentData","error","isLoaded","data","message","className","src","current","condition","icon","text","temp_c","feelslike_c","React","Component","Tomorrow","forecast","forecastday","day","mintemp_c","maxtemp_c","Hourly","map","hour","filter","hourlyData","time_epoch","Date","now","i","time","getDate","getMonth","getHours","renderHourly","App","state","location","currentWeather","a","fetch","then","response","json","setState","city","to","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.08b39e63.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\nclass Current extends React.Component\n{\n\n    constructor (props) {\n      super(props);\n    }\n  \n    render()\n    {\n      const {error, isLoaded, data} = this.props.currentData;\n      if(error){\n        return <div>Error: {error.message}</div>\n      } else if(!isLoaded){\n        return <div>Loading...</div>;\n      } else {\n        return (\n          <div>\n            <ul className=\"container\">\n                <li><img src={data.current.condition.icon}/></li>\n                <li>{data.current.condition.text}</li>\n                <li className=\"temp\">{data.current.temp_c}°C</li>\n                <li>feels like: <span className=\"temp\">{data.current.feelslike_c}°C</span></li>\n            </ul>\n          </div>\n        );\n      }\n        \n    }\n}\n\nexport default Current;\n","import React from 'react';\nimport './style.css';\n\nclass Tomorrow extends React.Component\n{\n\n    constructor (props) {\n      super(props);\n    }\n  \n    render()\n    {\n      const {error, isLoaded, data} = this.props.forecast;\n      if(error){\n        return <div>Error: {error.message}</div>\n      } else if(!isLoaded){\n        return <div>Loading...</div>;\n      } else {\n        return (\n          <div>\n            <ul className=\"container\">\n                <li><img src={data.forecast.forecastday[1].day.condition.icon}/></li>\n                <li>{data.forecast.forecastday[1].day.condition.text}</li>\n                <li>min: <span className=\"temp\">{data.forecast.forecastday[1].day.mintemp_c}°C</span></li>\n                <li>max: <span className=\"temp\">{data.forecast.forecastday[1].day.maxtemp_c}°C</span></li>\n            </ul>\n          </div>\n        );\n      }\n        \n    }\n}\n\nexport default Tomorrow;\n","import React from 'react';\nimport './style.css';\n\nclass Hourly extends React.Component\n{\n\n    constructor (props) {\n      super(props);\n    }\n  \n    render()\n    {\n      const {error, isLoaded, data} = this.props.forecast;\n\n      const renderHourly = (data) =>\n        data.forecast.forecastday.map(\n          (day) => day.hour\n            .filter(\n              hourlyData => hourlyData.time_epoch*1000 >= (Date.now()-3600000)\n            ).map((hourlyData, i) => {\n                const time = new Date(hourlyData.time_epoch*1000)\n              return <ul key={i} className=\"container\">\n                <li><span className=\"date\">{time.getDate() + \".0\" + time.getMonth() + \".\"}</span> <br /> {time.getHours() + ':00'}</li>\n                <li><img src={hourlyData.condition.icon} /></li>\n                <li>{hourlyData.condition.text}</li>\n                <li className=\"temp\">{hourlyData.temp_c}°C</li>\n              </ul>\n            }\n          )\n        ); \n\n      if(error){\n        return <div>Error: {error.message}</div>\n      } else if(!isLoaded){\n        return <div>Loading...</div>;\n      } else {\n        return (\n          <div>\n            {renderHourly(data)}\n          </div>\n        );\n      }\n        \n    }\n}\n\nexport default Hourly;\n","import React from 'react';\nimport { Link, Route, Switch } from 'react-router-dom';\nimport Current from './Pages/Current';\nimport Tomorrow from './Pages/Tomorrow';\nimport Hourly from './Pages/Hourly';\nimport './App.css'\n\n\n\n\nclass App extends React.Component\n{\n\n  constructor(props)\n  {\n    super(props);\n    this.state = {\n      location: {\n        error: null,\n        isLoaded: false,\n        data: null\n      },\n      currentWeather: {\n        error: null,\n        isLoaded: false,\n        data: null\n      },\n      forecast: {\n        error: null,\n        isLoaded: false,\n        data: null\n      }\n    }\n  }\n\n  async componentDidMount()\n  {\n    await fetch(\"https://json.geoiplookup.io/\")\n      .then(response => response.json())\n      .then (\n        (data) => {\n          this.setState({\n            location: {\n              isLoaded: true,\n              data,\n              error: data.error\n            }\n          });\n        },\n        (error) => {\n          this.setState({\n            location: {\n              isLoaded: true,\n              error\n            }\n          });\n        }\n      )\n\n    fetch(\"https://api.weatherapi.com/v1/current.json?key=75a62926a7bb4dc0bb8100310212402&q=\" + this.state.location.data.city + \"&aqi=no\")\n    .then(response => response.json())\n    .then(\n        (data) => {\n         this.setState({\n          currentWeather: {\n          isLoaded: true,\n          data,\n          error: data.error\n          }\n        });\n      },\n      (error) => {\n        this.setState({\n          currentWeather: {\n          isLoaded: true,\n          error\n          }\n        });\n      }\n    ) \n\n    fetch(\"https://api.weatherapi.com/v1/forecast.json?key=75a62926a7bb4dc0bb8100310212402&q=\" + this.state.location.data.city + \"&days=10&aqi=yes&alerts=yes\")          .then(response => response.json())\n      .then(\n        (data) => {\n        this.setState({\n          forecast: {\n          isLoaded: true,\n          data,\n          error: data.error\n          }\n        });\n      },\n      (error) => {\n        this.setState({\n          forecast: {\n          isLoaded: true,\n          error\n          }\n        });\n      }\n    ) \n  }\n\n  render()\n  {\n    return (\n      <div>\n        <nav>\n          <ul className=\"buttonList\">\n            <li>\n              <Link to=\"/Weather-Forecast\">Current</Link>\n            </li>\n            <li>\n              <Link to=\"/tomorrow\">Tomorrow</Link>\n            </li>\n            <li>\n              <Link to=\"/hourly\">Hourly</Link>\n            </li>\n          </ul>\n        </nav>\n        <Switch>\n          <Route path=\"/Weather-Forecast\">\n            <Current currentData={this.state.currentWeather} />\n          </Route>\n          <Route path=\"/tomorrow\">\n            <Tomorrow forecast={this.state.forecast} />\n         </Route>\n         <Route path=\"/hourly\">\n            <Hourly forecast={this.state.forecast} />\n         </Route>\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n  ,\n  document.getElementById('root')\n);"],"sourceRoot":""}